(define (domain mcs-agency)
    (:requirements :fluents :adl :typing)
    (:types cylinder block - item)
    (:predicates (wall ?x ?y) (obstacle ?x ?y)
                 (has ?o - item) (handsfree)
                 (reach ?x ?y) (retrieve ?i - item) (transfer ?i - item ?x ?y))
    (:derived (obstacle ?x ?y) (or (wall ?x ?y)))
    (:derived (reach ?x ?y) (and (= (xpos) ?x) (= (ypos) ?y)))
    (:derived (retrieve ?i) (has ?i))
    (:derived (transfer ?i ?x ?y)
              (and (= (xitem ?i) ?x) (= (yitem ?i) ?y) (not (has ?i))))
    (:functions (xpos) (ypos) (width) (height)
                (xitem ?i - item) (yitem ?i - item))
    (:action pickup
     :parameters (?i - item)
     :precondition (and (handsfree) (= (xpos) (xitem ?i)) (= (ypos) (yitem ?i)))
     :effect (and (has ?i))
    )
    (:action putdown
     :parameters (?i - item)
     :precondition (has ?i)
     :effect (and (handsfree) (not (has ?i)))
    )
    (:action up
     :precondition (and (< ypos height) (not (obstacle xpos (+ ypos 1))))
     :effect (and (increase ypos 1)
                  (forall (?i - item)
                          (when (has ?i) (increase (yitem ?i) 1))))
    )
    (:action down
     :precondition (and (> ypos 1) (not (obstacle xpos (- ypos 1))))
     :effect (and (decrease ypos 1)
                  (forall (?i - item)
                          (when (has ?i) (decrease (yitem ?i) 1))))
    )
    (:action right
     :precondition (and (< xpos width) (not (obstacle (+ xpos 1) ypos)))
     :effect (and (increase xpos 1)
                  (forall (?i - item)
                          (when (has ?i) (increase (xitem ?i) 1))))
    )
    (:action left
     :precondition (and (> xpos 1) (not (obstacle (- xpos 1) ypos)))
     :effect (and (decrease xpos 1)
                  (forall (?i - item)
                          (when (has ?i) (decrease (xitem ?i) 1))))
    )
)
