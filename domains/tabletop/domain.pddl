(define (domain blocks)
  (:requirements :fluents :equality)
  (:predicates
    (on ?x - block ?y - block)
    (holding ?x - block)
    (fits ?x - block ?y - block))
  (:functions (size ?x - block)
              (amounton ?x - block)
              (posx ?x - block)
              (posy ?x - block)
              (posz ?x - block)
              (yaw ?x - block)
              (pitch ?x - block)
              (roll ?x - block))
  (:derived (fits ?x ?y)
            (>= (size ?x) (+ (amounton ?x) (size ?y))))
  (:derived (handempty)
            (forall (?x - block) (not (holding ?x))))
  (:action pickup
    :parameters (?x ?y)
    :precondition (and (on ?x ?y) (= (amounton ?y) 0) (handempty))
    :effect
      (and (not (on ?x ?y))
           (holding ?y)
           (decrease (amounton ?x) (size ?y))
           (assign (posx ?y) 8)
           (assign (posy ?y) 8)
           (assign (posz ?y) 5)
           (assign (yaw ?y) 0)
           (assign (pitch ?y) 0)
           (assign (roll ?y) 0)))
  (:action putdown
    :parameters (?x ?y ?xoff ?yoff)
    :precondition (and (holding ?y) (fits ?x ?y))
    :effect
      (and (not (holding ?y))
           (on ?x ?y)
           (increase (amounton ?x) (size ?y))
           (assign (posx ?y) ?xoff)
           (assign (posy ?y) ?yoff)
           (assign (posz ?y) -1)
           (assign (yaw ?y) 0)
           (assign (pitch ?y) -1)
           (assign (roll ?y) -1))))
